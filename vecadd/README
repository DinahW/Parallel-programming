This program shows an example of vector addition
That is to say C = A + B.
It computes the element-wise sum of two vectors on the GPU, 
showing memory allocation, data transfer, and kernel execution on a GPU

Index Calculation in the Kernel
unsigned int index = blockDim.x * blockIdx.x + threadIdx.x;

Allocate three arrays on the host
  host_array_a = (float *)malloc(size);
  host_array_b = (float *)malloc(size);
  host_array_c = (float *)malloc(size);

Allocate three arrays on the device
  cudaMalloc((void **)&device_array_a, size);
  cudaMalloc((void **)&device_array_b, size); 
  cudaMalloc((void **)&device_array_c, size); 

Copy the content of first two arrays to the device
  cudaMemcpy(device_array_a,host_array_a, size, cudaMemcpyHostToDevice); 
  cudaMemcpy(device_array_b,host_array_b, size, cudaMemcpyHostToDevice); 

Perform vector addition 
    const size_t nThreads = 256;
    size_t nBlocks = num_elements / nThreads;

Copy the result back to host
  cudaMemcpy(host_array_c, device_array_c, size, cudaMemcpyDeviceToHost);

Deallocate the host and device memory
    free(host_array_a);
    free(host_array_b);
    free(host_array_c);

    cudaFree(device_array_a);
    cudaFree(device_array_b);
    cudaFree(device_array_c);
